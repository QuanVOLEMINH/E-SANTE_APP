{"version":3,"sources":["core/src/model/select/dynamic-select.model.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,OAAO,EAAE,yBAAyB,EAAmC,MAAM,iCAAiC,CAAC;AAC7G,OAAO,EAAE,YAAY,EAAE,MAAM,wCAAwC,CAAC;AAEtE,MAAM,CAAC,IAAM,gCAAgC,GAAG,QAAQ,CAAC;AASzD;IAA2C,sCAA4B;IAQnE,4BAAY,MAAmC,EAAE,GAAe;QAAhE,YAEI,kBAAM,MAAM,EAAE,GAAG,CAAC,SAKrB;QATwB,UAAI,GAAW,gCAAgC,CAAC;QAMrE,KAAI,CAAC,UAAU,GAAG,OAAO,MAAM,CAAC,UAAU,KAAK,SAAS,GAAG,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;QACrF,KAAI,CAAC,QAAQ,GAAG,OAAO,MAAM,CAAC,QAAQ,KAAK,SAAS,GAAG,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC/E,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC;;IAChD,CAAC;IAED,mCAAM,GAAN;QAAA,iBAKC;QALM,iBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,4BAAoB;;QAEvB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,EAArB,CAAqB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAErG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IApBe;QAAf,YAAY,EAAE;;0DAAqB;IACpB;QAAf,YAAY,EAAE;;wDAAmB;IAClB;QAAf,YAAY,EAAE;;2DAAqB;IAEpB;QAAf,YAAY,EAAE;;oDAA0D;IAiB7E,yBAAC;CAvBD,AAuBC,CAvB0C,yBAAyB,GAuBnE;SAvBY,kBAAkB","file":"dynamic-select.model.js","sourcesContent":["import { ClsConfig } from \"../dynamic-form-control.model\";\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, cls?: ClsConfig) {\n\n        super(config, cls);\n\n        this.filterable = typeof config.filterable === \"boolean\" ? config.filterable : false;\n        this.multiple = typeof config.multiple === \"boolean\" ? config.multiple : false;\n        this.placeholder = config.placeholder || \"\";\n    }\n\n    select(...indices: number[]): void {\n\n        let value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n\n        this.valueUpdates.next(value);\n    }\n}"]}