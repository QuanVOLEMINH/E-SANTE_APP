{"version":3,"sources":["core/src/model/form-array/dynamic-form-array.model.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACH,uBAAuB,GAK1B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAEjF;IAOI,oCAAY,OAA8B,EAAE,KAAqC,EAAE,KAAkB;QAAzD,sBAAA,EAAA,UAAqC;QAAE,sBAAA,EAAA,SAAiB,CAAC;QAEjG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,sBAAI,8CAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAED,wCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,2CAAM,GAAN;QACI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IArBe;QAAf,YAAY,EAAE;;6DAAkC;IACjC;QAAf,YAAY,EAAE;;6DAAe;IAqBlC,iCAAC;CA1BD,AA0BC,IAAA;SA1BY,0BAA0B;AA4BvC,MAAM,CAAC,IAAM,+BAA+B,GAAG,OAAO,CAAC;AAavD;IAA2C,yCAAuB;IAc9D,+BAAY,MAAmC,EAAE,GAAe;QAAhE,YAEI,kBAAM,MAAM,EAAE,GAAG,CAAC,SA2BrB;QArCe,YAAM,GAAiC,EAAE,CAAC;QAMjC,UAAI,GAAW,+BAA+B,CAAC;QAMpE,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,YAAY,KAAK,UAAU,CAAC,CAAC,CAAC;YAC5C,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAC1F,CAAC;QAED,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC;QACpD,KAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,IAAI,IAAI,CAAC;QAC9D,KAAI,CAAC,cAAc,GAAG,KAAI,CAAC,YAAY,EAAE,CAAC;QAC1C,KAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC;QACpD,KAAI,CAAC,YAAY,GAAG,OAAO,MAAM,CAAC,YAAY,KAAK,QAAQ,GAAG,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC;QACtF,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC;QAE1C,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAE/B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,KAAK;gBACpC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,0BAA0B,CAAC,KAAI,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QAEP,CAAC;QAAC,IAAI,CAAC,CAAC;YAEJ,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAI,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE,CAAC;gBACrD,KAAI,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC;QACL,CAAC;;IACL,CAAC;IAEO,gDAAgB,GAAxB;QACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;IAC/D,CAAC;IAED,sBAAI,uCAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC9B,CAAC;;;OAAA;IAED,mCAAG,GAAH,UAAI,KAAa;QACb,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,wCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED,2CAAW,GAAX,UAAY,KAAa;QAErB,IAAI,KAAK,GAAG,IAAI,0BAA0B,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED,yCAAS,GAAT,UAAU,KAAa,EAAE,IAAY;QAEjC,CAAA,KAAA,IAAI,CAAC,MAAM,CAAA,CAAC,MAAM,YAAC,KAAK,GAAG,IAAI,EAAE,CAAC,SAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,GAAE;QACrE,IAAI,CAAC,gBAAgB,EAAE,CAAC;;IAC5B,CAAC;IAED,2CAAW,GAAX,UAAY,KAAa;QAErB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IA/Ee;QAAf,YAAY,EAAE;;iEAA6C;IAC5C;QAAf,YAAY,EAAE;;sEAAkD;IAEjD;QAAf,YAAY,EAAE;;iEAA6C;IAC5C;QAAf,YAAY,EAAE;;yDAA2C;IAC1C;QAAf,YAAY,EAAE;;+DAAsB;IACrB;QAAf,YAAY,EAAE;;4DAAwC;IAEvC;QAAf,YAAY,EAAE;;iEAAoD;IAEnD;QAAf,YAAY,EAAE;;uDAAyD;IAsE5E,4BAAC;CAlFD,AAkFC,CAlF0C,uBAAuB,GAkFjE;SAlFY,qBAAqB","file":"dynamic-form-array.model.js","sourcesContent":["import {\n    DynamicFormControlModel,\n    DynamicFormControlModelConfig,\n    DynamicPathable,\n    DynamicValidatorsMap,\n    ClsConfig,\n} from \"../dynamic-form-control.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormControlModel[];\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormControlModel[] = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    asyncValidator?: DynamicValidatorsMap;\n    groupAsyncValidator?: DynamicValidatorsMap;\n    groupFactory?: () => DynamicFormControlModel[];\n    groupValidator?: DynamicValidatorsMap;\n    groups?: DynamicFormArrayGroupModel[];\n    initialCount?: number;\n    validator?: DynamicValidatorsMap;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() asyncValidator: DynamicValidatorsMap | null;\n    @serializable() groupAsyncValidator: DynamicValidatorsMap | null;\n    groupFactory: () => DynamicFormControlModel[];\n    @serializable() groupValidator: DynamicValidatorsMap | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n    @serializable() validator: DynamicValidatorsMap | null;\n\n    @serializable() readonly groupPrototype: DynamicFormControlModel[]; // only to recreate model from JSON\n    readonly origin: DynamicFormControlModel[]; // deprecated - only for backwards compatibility;\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, cls?: ClsConfig) {\n\n        super(config, cls);\n\n        if (typeof config.groupFactory === \"function\") {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.asyncValidator = config.asyncValidator || null;\n        this.groupAsyncValidator = config.groupAsyncValidator || null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidator = config.groupValidator || null;\n        this.initialCount = typeof config.initialCount === \"number\" ? config.initialCount : 1;\n        this.validator = config.validator || null;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index || index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n}"]}